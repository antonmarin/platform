---
version: '3.9'
services:
  server:
    deploy:
      replicas: ${VW_REPLICAS:-1}
#      resources:
#        reservations:
#          memory: 100M
#        limits:
#          memory: 1G
    restart: unless-stopped
    image: vaultwarden/server:1.34.3-alpine
    environment:
      # hosting
      SCHEMA:
      IS_TLS_ENABLED:
      ACME_HOSTNAME:
      ROUTE_HOSTNAME:
      DOMAIN: "${SCHEMA}://${ACME_HOSTNAME}"
      # features
      SIGNUPS_ALLOWED: "false"
      INVITATIONS_ALLOWED: "false"
      PASSWORD_HINTS_ALLOWED: "true"
      SHOW_PASSWORD_HINT: "false"
      USER_ATTACHMENT_LIMIT: "0" # no backup of attachments now
      ADMIN_TOKEN:
      DISABLE_ADMIN_TOKEN: "false"
      # storage
      I_REALLY_WANT_VOLATILE_STORAGE: "true"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}"
      RSA_KEY_FILENAME: "data/keys/rsa_key"
      SENDS_FOLDER: "data/sends"
      # smtp
      SMTP_HOST:
      SMTP_USERNAME:
      SMTP_PASSWORD:
      SMTP_TIMEOUT: "15"
      SMTP_SECURITY: "force_tls"
      SMTP_PORT: "465"
      SMTP_FROM: "klub.top@yandex.ru"
      SMTP_FROM_NAME: "КлубТоп"
      # logging
      LOG_LEVEL: "info"
      SMTP_DEBUG: "false"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`${ROUTE_HOSTNAME}`)"
      - "traefik.http.routers.vaultwarden.tls=${IS_TLS_ENABLED}"
      - "traefik.http.routers.vaultwarden.tls.certresolver=letsencrypt"
      - "traefik.http.routers.vaultwarden.tls.domains[0].main=${ROUTE_HOSTNAME}"
      - "traefik.http.routers.vaultwarden.tls.domains[0].sans[0]=${ACME_HOSTNAME}"
    volumes:
      - keys:/data/keys/
      - sends:/data/sends/
    networks:
      - ingress
      - default
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:80" ]
      interval: 30s
#      timeout: 3s
      retries: 5
      start_period: 1s
    depends_on:
      database:
        condition: service_healthy
  database:
    deploy:
      replicas: 1
#      resources:
#        reservations:
#          memory: 100M
#        limits:
#          memory: 1G
    restart: unless-stopped
    image: postgres:15-alpine
    environment:
      TZ: Europe/Moscow
      POSTGRES_USER:
      POSTGRES_PASSWORD:
      POSTGRES_DB:
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      retries: 5

  backuper:
    deploy:
      replicas: 1
#      resources:
#        reservations:
#          memory: 100M
#        limits:
#          memory: 1G
    restart: no
    image: antonmarin/backuper:latest # https://hub.docker.com/r/antonmarin/backuper
    entrypoint: [ "/bin/sh", "-c" ]
#    command: [ '/backuper/backuper.sh pg_backup ${BACKUP_PATH}' ]
    command:  
      - "echo '15 */12 * * * /backuper/backuper.sh pg_backup ${BACKUP_PATH}' | crontab - && crond -L /dev/stdout -l4 -f" 
    environment:
      DEBUG: "true"
      PGHOST: "database"
      PGPORT: "5432"
      POSTGRES_DB:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
      TMP_DIR:
      GPG_PASSPHRASE:
      BACKUP_PATH:
      RCLONE_CONFIG_REMOTE_ENDPOINT:
      RCLONE_CONFIG_REMOTE_ACCESS_KEY_ID:
      RCLONE_CONFIG_REMOTE_SECRET_ACCESS_KEY:
      TZ: Europe/Moscow
      RCLONE_REMOTE: "remote"
      RETENTION: "6M"
    depends_on:
      database:
        condition: service_healthy

volumes:
  database:
  keys:
  sends:  
networks:
  ingress:
    name: "ingress"
